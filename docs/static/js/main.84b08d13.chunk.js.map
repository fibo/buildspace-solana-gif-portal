{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["console","log","kp","TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","baseAccount","Keypair","generate","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","info","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","getProvider","connection","Connection","Provider","getGifList","provider","program","Program","account","fetch","createGifAccount","rpc","initialize","accounts","user","wallet","systemProgram","programId","signers","onInputChange","event","value","target","sendGif","length","addGif","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","i","gifLink","src","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84b08d13.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\nimport \"./App.css\";\nconsole.log(kp);\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n/*\nconst TEST_GIFS = [\n  \"https://media.giphy.com/media/6jvIEDTEW5X9K/giphy.gif\",\n  \"https://media.giphy.com/media/8Lc5xmvzRhlLy/giphy.gif\",\n  \"https://media.giphy.com/media/h3Jxu7a7pd72w/giphy.gif\",\n  \"https://media.giphy.com/media/hMAhEUs3fwEbC/giphy.gif\",\n];\n*/\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState(null);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.info(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.info(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map(({ gifLink }, i) => (\n              <div className=\"gif-item\" key={i}>\n                <img src={gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}